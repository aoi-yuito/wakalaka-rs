// Copyright (c) 2024 Kawaxte
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

use std::fmt;

use wakalaka_core::types::Throwable;

pub enum Endpoint {
    Alarm,
    Amazing,
    Ask,
    Baka,
    Bite,
    Blush,
    Blyat,
    Boop,
    Clap,
    Coffee,
    Confused,
    Cry,
    Cuddle,
    Cute,
    Dance,
    Destroy,
    Die,
    Disappear,
    Dodge,
    Error,
    Facedesk,
    Facepalm,
    Fbi,
    Fight,
    Happy,
    Hide,
    HighFive,
    Hug,
    Kill,
    Kiss,
    Laugh,
    Lick,
    Lonely,
    Love,
    Mad,
    Money,
    Nom,
    Nosebleed,
    Ok,
    Party,
    Pat,
    Peek,
    Poke,
    Pout,
    Protect,
    Puke,
    Punch,
    Purr,
    Pusheen,
    Run,
    Salute,
    Scared,
    Scream,
    Shame,
    Shocked,
    Shoot,
    Shrug,
    Sip,
    Sit,
    Slap,
    Sleepy,
    Smile,
    Smoke,
    Smug,
    Spin,
    Stare,
    Stomp,
    Tickle,
    Trap,
    Triggered,
    UwU,
    Wasted,
    Wave,
    Wiggle,
    Wink,
    Yeet,
}

impl fmt::Display for Endpoint {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Self::Alarm => "/alarm",
                Self::Amazing => "/amazing",
                Self::Ask => "/ask",
                Self::Baka => "/baka",
                Self::Bite => "/bite",
                Self::Blush => "/blush",
                Self::Blyat => "/blyat",
                Self::Boop => "/boop",
                Self::Clap => "/clap",
                Self::Coffee => "/coffee",
                Self::Confused => "/confused",
                Self::Cry => "/cry",
                Self::Cuddle => "/cuddle",
                Self::Cute => "/cute",
                Self::Dance => "/dance",
                Self::Destroy => "/destroy",
                Self::Die => "/die",
                Self::Disappear => "/disappear",
                Self::Dodge => "/dodge",
                Self::Error => "/error",
                Self::Facedesk => "/facedesk",
                Self::Facepalm => "/facepalm",
                Self::Fbi => "/fbi",
                Self::Fight => "/fight",
                Self::Happy => "/happy",
                Self::Hide => "/hide",
                Self::HighFive => "/highfive",
                Self::Hug => "/hug",
                Self::Kill => "/kill",
                Self::Kiss => "/kiss",
                Self::Laugh => "/laugh",
                Self::Lick => "/lick",
                Self::Lonely => "/lonely",
                Self::Love => "/love",
                Self::Mad => "/mad",
                Self::Money => "/money",
                Self::Nom => "/nom",
                Self::Nosebleed => "/nosebleed",
                Self::Ok => "/ok",
                Self::Party => "/party",
                Self::Pat => "/pat",
                Self::Peek => "/peek",
                Self::Poke => "/poke",
                Self::Pout => "/pout",
                Self::Protect => "/protect",
                Self::Puke => "/puke",
                Self::Punch => "/punch",
                Self::Purr => "/purr",
                Self::Pusheen => "/pusheen",
                Self::Run => "/run",
                Self::Salute => "/salute",
                Self::Scared => "/scared",
                Self::Scream => "/scream",
                Self::Shame => "/shame",
                Self::Shocked => "/shocked",
                Self::Shoot => "/shoot",
                Self::Shrug => "/shrug",
                Self::Sip => "/sip",
                Self::Sit => "/sit",
                Self::Slap => "/slap",
                Self::Sleepy => "/sleepy",
                Self::Smile => "/smile",
                Self::Smoke => "/smoke",
                Self::Smug => "/smug",
                Self::Spin => "/spin",
                Self::Stare => "/stare",
                Self::Stomp => "/stomp",
                Self::Tickle => "/tickle",
                Self::Trap => "/trap",
                Self::Triggered => "/triggered",
                Self::UwU => "/uwu",
                Self::Wasted => "/wasted",
                Self::Wave => "/wave",
                Self::Wiggle => "/wiggle",
                Self::Wink => "/wink",
                Self::Yeet => "/yeet",
            }
        )
    }
}

pub async fn fetch_gif_by_endpoint(endpoint: Endpoint) -> Throwable<String> {
    let json = crate::fetch_json_from_get_request(&format!("gif{endpoint}")).await?;

    let gif_url = format!(
        "{}",
        json["response"].as_str().ok_or("Failed to parse gif url")?
    );
    Ok(gif_url)
}
